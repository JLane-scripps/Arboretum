2. Simulator
	?- list of .sqt files # the PSMTree.  (what does this mean??)
3. Publish package.
4. Write extensive ReadMe
5. Present


__SIMULATOR:__
^  	1. Make a function that creates a file which holds 50k randomly generated psms.
	pickle.dump[randompsm() for i in range[50_000], outfile name)
^	2. loop over N number of these files (each containing 50k random psms)
for each file, adding each file to a single tree.
2.5 Measure each LOAD time.
3. Measure each ADD time, to add pickled list of psms into the tree.
4. After each ADD, we QUERY. The tree generate 500 new psms, but not to use as psms, to create bounds, then search within the tree for matches within each of the 500 bounds.
, and returning the first 500 matches as a list. MEASURE TIME taken to find 500 matches.
5. save the tree (pickle the tree) to a 'tree_file', measure how long it takes to SAVE.
6. call the constructor again to remake the original tree as empty, LOAD in the previous tree (pickled as 'tree_file'), and open next file. MEASURE LOAD TIME.
7. ADD the list from the next file to the tree, measuring add time again. Save add time to a performance dict as a second data point.
8. QUERY again. Rinse, repeat. 
9. When all files have been read, added, measured, the tree is saved one last time, performance dict is saved and plotted. 


To start, don't make files full of 50k psms, just generate 50k psms for each run. generate on the fly.

PARAMETERS: Let's do 5 files of 50k psms each. This will lead to a final tree of 250k psms. 
Our goal is to measure the increase in ADD TIMES, LOAD TIMES, SAVE TIMES, and QUERY TIMES as the tree is increased my 50k each step.


ALSO write new performance tester for TY.
Use / look at code for Performance Tester 2 in his github.
Make 1 tree, adding N reandomly generated psms to it, querying M psms from it, then adding N, Querying M, ad nauseum until reaching max tree size.
replace same variable measuring add time and search time, so by the end it's just 1 variable you can print the value of. 


try pickling arborist
if that doesn't work, loop through each tree
pass folders instead of individual files; needs to load more than the last one
